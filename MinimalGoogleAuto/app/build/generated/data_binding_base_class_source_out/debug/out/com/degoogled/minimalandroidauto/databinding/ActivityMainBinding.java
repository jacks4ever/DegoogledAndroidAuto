// Generated by view binder compiler. Do not edit!
package com.degoogled.minimalandroidauto.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.degoogled.minimalandroidauto.R;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonConnect;

  @NonNull
  public final Button buttonHome;

  @NonNull
  public final Button buttonMessaging;

  @NonNull
  public final Button buttonOpenStreetMap;

  @NonNull
  public final Button buttonSettings;

  @NonNull
  public final Button buttonWaze;

  @NonNull
  public final CardView cardConnection;

  @NonNull
  public final CardView cardFeatures;

  @NonNull
  public final CardView cardNavigation;

  @NonNull
  public final CardView cardPrivacy;

  @NonNull
  public final SwitchMaterial switchPrivacy;

  @NonNull
  public final TextView textConnectionStatus;

  @NonNull
  public final TextView textConnectionTitle;

  @NonNull
  public final TextView textDescription;

  @NonNull
  public final TextView textFeaturesTitle;

  @NonNull
  public final TextView textNavigationTitle;

  @NonNull
  public final TextView textNetworkStatus;

  @NonNull
  public final TextView textPrivacyDescription;

  @NonNull
  public final TextView textPrivacyTitle;

  @NonNull
  public final TextView textTitle;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button buttonConnect,
      @NonNull Button buttonHome, @NonNull Button buttonMessaging,
      @NonNull Button buttonOpenStreetMap, @NonNull Button buttonSettings,
      @NonNull Button buttonWaze, @NonNull CardView cardConnection, @NonNull CardView cardFeatures,
      @NonNull CardView cardNavigation, @NonNull CardView cardPrivacy,
      @NonNull SwitchMaterial switchPrivacy, @NonNull TextView textConnectionStatus,
      @NonNull TextView textConnectionTitle, @NonNull TextView textDescription,
      @NonNull TextView textFeaturesTitle, @NonNull TextView textNavigationTitle,
      @NonNull TextView textNetworkStatus, @NonNull TextView textPrivacyDescription,
      @NonNull TextView textPrivacyTitle, @NonNull TextView textTitle) {
    this.rootView = rootView;
    this.buttonConnect = buttonConnect;
    this.buttonHome = buttonHome;
    this.buttonMessaging = buttonMessaging;
    this.buttonOpenStreetMap = buttonOpenStreetMap;
    this.buttonSettings = buttonSettings;
    this.buttonWaze = buttonWaze;
    this.cardConnection = cardConnection;
    this.cardFeatures = cardFeatures;
    this.cardNavigation = cardNavigation;
    this.cardPrivacy = cardPrivacy;
    this.switchPrivacy = switchPrivacy;
    this.textConnectionStatus = textConnectionStatus;
    this.textConnectionTitle = textConnectionTitle;
    this.textDescription = textDescription;
    this.textFeaturesTitle = textFeaturesTitle;
    this.textNavigationTitle = textNavigationTitle;
    this.textNetworkStatus = textNetworkStatus;
    this.textPrivacyDescription = textPrivacyDescription;
    this.textPrivacyTitle = textPrivacyTitle;
    this.textTitle = textTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonConnect;
      Button buttonConnect = ViewBindings.findChildViewById(rootView, id);
      if (buttonConnect == null) {
        break missingId;
      }

      id = R.id.buttonHome;
      Button buttonHome = ViewBindings.findChildViewById(rootView, id);
      if (buttonHome == null) {
        break missingId;
      }

      id = R.id.buttonMessaging;
      Button buttonMessaging = ViewBindings.findChildViewById(rootView, id);
      if (buttonMessaging == null) {
        break missingId;
      }

      id = R.id.buttonOpenStreetMap;
      Button buttonOpenStreetMap = ViewBindings.findChildViewById(rootView, id);
      if (buttonOpenStreetMap == null) {
        break missingId;
      }

      id = R.id.buttonSettings;
      Button buttonSettings = ViewBindings.findChildViewById(rootView, id);
      if (buttonSettings == null) {
        break missingId;
      }

      id = R.id.buttonWaze;
      Button buttonWaze = ViewBindings.findChildViewById(rootView, id);
      if (buttonWaze == null) {
        break missingId;
      }

      id = R.id.cardConnection;
      CardView cardConnection = ViewBindings.findChildViewById(rootView, id);
      if (cardConnection == null) {
        break missingId;
      }

      id = R.id.cardFeatures;
      CardView cardFeatures = ViewBindings.findChildViewById(rootView, id);
      if (cardFeatures == null) {
        break missingId;
      }

      id = R.id.cardNavigation;
      CardView cardNavigation = ViewBindings.findChildViewById(rootView, id);
      if (cardNavigation == null) {
        break missingId;
      }

      id = R.id.cardPrivacy;
      CardView cardPrivacy = ViewBindings.findChildViewById(rootView, id);
      if (cardPrivacy == null) {
        break missingId;
      }

      id = R.id.switchPrivacy;
      SwitchMaterial switchPrivacy = ViewBindings.findChildViewById(rootView, id);
      if (switchPrivacy == null) {
        break missingId;
      }

      id = R.id.textConnectionStatus;
      TextView textConnectionStatus = ViewBindings.findChildViewById(rootView, id);
      if (textConnectionStatus == null) {
        break missingId;
      }

      id = R.id.textConnectionTitle;
      TextView textConnectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (textConnectionTitle == null) {
        break missingId;
      }

      id = R.id.textDescription;
      TextView textDescription = ViewBindings.findChildViewById(rootView, id);
      if (textDescription == null) {
        break missingId;
      }

      id = R.id.textFeaturesTitle;
      TextView textFeaturesTitle = ViewBindings.findChildViewById(rootView, id);
      if (textFeaturesTitle == null) {
        break missingId;
      }

      id = R.id.textNavigationTitle;
      TextView textNavigationTitle = ViewBindings.findChildViewById(rootView, id);
      if (textNavigationTitle == null) {
        break missingId;
      }

      id = R.id.textNetworkStatus;
      TextView textNetworkStatus = ViewBindings.findChildViewById(rootView, id);
      if (textNetworkStatus == null) {
        break missingId;
      }

      id = R.id.textPrivacyDescription;
      TextView textPrivacyDescription = ViewBindings.findChildViewById(rootView, id);
      if (textPrivacyDescription == null) {
        break missingId;
      }

      id = R.id.textPrivacyTitle;
      TextView textPrivacyTitle = ViewBindings.findChildViewById(rootView, id);
      if (textPrivacyTitle == null) {
        break missingId;
      }

      id = R.id.textTitle;
      TextView textTitle = ViewBindings.findChildViewById(rootView, id);
      if (textTitle == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, buttonConnect, buttonHome,
          buttonMessaging, buttonOpenStreetMap, buttonSettings, buttonWaze, cardConnection,
          cardFeatures, cardNavigation, cardPrivacy, switchPrivacy, textConnectionStatus,
          textConnectionTitle, textDescription, textFeaturesTitle, textNavigationTitle,
          textNetworkStatus, textPrivacyDescription, textPrivacyTitle, textTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
